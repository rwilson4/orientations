var N = null;var searchIndex = {};
searchIndex["orientations"]={"doc":"","items":[[3,"Vector3d","orientations","A 3-d vector",N,N],[3,"Quaternion","","A quaternion",N,N],[8,"Rotation","","",N,N],[16,"R","","",0,N],[10,"identity","","",0,N],[10,"inverse","","",0,N],[10,"as_quaternion","","",0,[[["self"]],["quaternion"]]],[10,"angle_axis","","",0,N],[10,"before","","",0,[[["self"],["t"]],["t"]]],[10,"after","","",0,[[["self"],["t"]],["t"]]],[10,"multiply","","",0,N],[8,"Orientation","","",N,N],[11,"new","","Create a new Vector3d.",1,N],[11,"dot","","Computes the dot product of two vectors.",1,[[["self"],["vector3d"]],["f64"]]],[11,"norm_squared","","Computes the square of the (l2) norm of a vector.",1,[[["self"]],["f64"]]],[11,"norm","","Computes the (l2) norm of a vector.",1,[[["self"]],["f64"]]],[11,"abs","","Alias for norm",1,[[["self"]],["f64"]]],[11,"scalar_multiple","","Computes the scalar multiple of a vector.",1,[[["self"],["f64"]],["vector3d"]]],[11,"negate","","Computes the negative of a vector.",1,[[["self"]],["vector3d"]]],[11,"normalized","","Return a vector with the same direction as self but unit magnitude. The return value is wrapped in an Option in case the vector has zero mangitude, in which case the result will be None.",1,[[["self"]],["result",["vector3d","string"]]]],[11,"zero","","Returns the zero vector.",1,[[],["vector3d"]]],[11,"x","","Create a new unit Vector3d aligned with the x-axis.",1,[[],["vector3d"]]],[11,"y","","Create a new unit Vector3d aligned with the x-axis.",1,[[],["vector3d"]]],[11,"z","","Create a new unit Vector3d aligned with the x-axis.",1,[[],["vector3d"]]],[11,"new","","Create a new Quaternion.",2,[[["f64"],["vector3d"]],["quaternion"]]],[11,"from_angle_axis","","Create a quaternion from the corresponding angle and axis of rotation.",2,[[["f64"],["vector3d"]],["quaternion"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"identity","","Return the identity Quaternion.",2,[[],["quaternion"]]],[11,"inverse","","Calculate the inverse of a quaternion.",2,[[["self"]],["quaternion"]]],[11,"as_quaternion","","Get the quaternion representation of a rotation.",2,[[["self"]],["quaternion"]]],[11,"angle_axis","","Get the angle and axis associated with a rotation. If the rotation is the identity, the z-axis will be returned.",2,N],[11,"multiply","","Compose two rotations.",2,[[["self"],["t"]],["quaternion"]]],[11,"before","","Compose two rotations.",2,[[["self"],["t"]],["t"]]],[11,"after","","Compose two rotations.",2,[[["self"],["t"]],["t"]]],[11,"clone","","",1,[[["self"]],["vector3d"]]],[11,"clone","","",2,[[["self"]],["quaternion"]]],[11,"eq","","",1,[[["self"],["vector3d"]],["bool"]]],[11,"ne","","",1,[[["self"],["vector3d"]],["bool"]]],[11,"eq","","",2,[[["self"],["quaternion"]],["bool"]]],[11,"ne","","",2,[[["self"],["quaternion"]],["bool"]]],[11,"sub","","",1,[[["self"],["vector3d"]],["vector3d"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[8,"Rotation"],[3,"Vector3d"],[3,"Quaternion"]]};
initSearch(searchIndex);

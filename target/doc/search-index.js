var N = null;var searchIndex = {};
searchIndex["orientations"]={"doc":"A library for Rotations and Orientations.","items":[[3,"Vector3d","orientations","A 3-d vector",N,N],[12,"data","","The vector",0,N],[3,"Quaternion","","A quaternion",N,N],[3,"RotationMatrix","","A rotation matrix",N,N],[11,"new","","Create a new Vector3d.",0,N],[11,"dot","","Computes the dot product of two vectors.",0,[[["self"],["self"]],["f64"]]],[11,"cross","","Computes the cross product of two vectors.",0,[[["self"],["self"]],["self"]]],[11,"norm_squared","","Computes the square of the (l2) norm of a vector.",0,[[["self"]],["f64"]]],[11,"norm","","Computes the (l2) norm of a vector.",0,[[["self"]],["f64"]]],[11,"scalar_multiple","","Computes the scalar multiple of a vector.",0,[[["self"],["f64"]],["self"]]],[11,"negate","","Computes the negative of a vector.",0,[[["self"]],["self"]]],[11,"normalized","","Return a vector with the same direction as self but unit…",0,[[["self"]],["result",["string"]]]],[11,"zero","","Returns the zero vector.",0,[[],["self"]]],[11,"x","","Create a new unit Vector3d aligned with the x-axis.",0,[[],["self"]]],[11,"y","","Create a new unit Vector3d aligned with the x-axis.",0,[[],["self"]]],[11,"z","","Create a new unit Vector3d aligned with the x-axis.",0,[[],["self"]]],[11,"new","","Create a new Quaternion.",1,[[["f64"],["vector3d"]],["self"]]],[11,"from_angle_axis","","Create a quaternion from the corresponding angle and axis…",1,[[["f64"],["vector3d"]],["self"]]],[11,"from_rows","","Create a new RotationMatrix from rows.",2,N],[11,"from_columns","","Create a new RotationMatrix from columns.",2,N],[8,"Rotation","","Rotation trait",N,N],[16,"R","","The representation of the Rotation. Every implementor must…",3,N],[10,"identity","","The identity rotation equivalent to no rotation at all.",3,N],[10,"inverse","","The inverse of a rotation.",3,[[["self"]],["result",["string"]]]],[10,"inverse_unchecked","","The inverse of a rotation.",3,N],[10,"as_quaternion","","Get the quaternion representation of a rotation.",3,[[["self"]],["quaternion"]]],[10,"as_rotation_matrix","","Get the rotation matrix representation of a rotation.",3,[[["self"]],["rotationmatrix"]]],[10,"angle_axis","","Get the angle and axis associated with a rotation.",3,N],[10,"before","","Compose two rotations.",3,[[["self"],["t"]],["t"]]],[10,"after","","Compose two rotations.",3,[[["self"],["t"]],["t"]]],[10,"multiply","","Convenience function; should not be used.",3,N],[10,"rotate_vector","","Rotate a vector",3,[[["self"],["vector3d"]],["vector3d"]]],[8,"Orientation","","Orientation trait",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"identity","","Return the identity Quaternion.",1,[[],["self"]]],[11,"inverse","","Calculate the inverse of a quaternion.",1,[[["self"]],["result",["string"]]]],[11,"inverse_unchecked","","Inverse but don't check for divide-by-zero.",1,[[["self"]],["self"]]],[11,"as_quaternion","","Get the quaternion representation of a rotation.",1,[[["self"]],["self"]]],[11,"as_rotation_matrix","","",1,[[["self"]],["rotationmatrix"]]],[11,"angle_axis","","Get the angle and axis associated with a rotation. If the…",1,N],[11,"multiply","","Compose two rotations.",1,[[["self"],["t"]],["self"]]],[11,"before","","Compose two rotations.",1,[[["self"],["t"]],["t"]]],[11,"after","","Compose two rotations.",1,[[["self"],["t"]],["t"]]],[11,"rotate_vector","","Rotate a vector",1,[[["self"],["vector3d"]],["vector3d"]]],[11,"identity","","",2,[[],["self"]]],[11,"inverse","","",2,[[["self"]],["result",["string"]]]],[11,"inverse_unchecked","","",2,[[["self"]],["self"]]],[11,"as_quaternion","","",2,[[["self"]],["quaternion"]]],[11,"as_rotation_matrix","","",2,[[["self"]],["self"]]],[11,"angle_axis","","",2,N],[11,"multiply","","",2,[[["self"],["t"]],["self"]]],[11,"before","","",2,[[["self"],["t"]],["t"]]],[11,"after","","",2,[[["self"],["t"]],["t"]]],[11,"rotate_vector","","",2,[[["self"],["vector3d"]],["vector3d"]]],[11,"eq","","",0,[[["self"],["vector3d"]],["bool"]]],[11,"ne","","",0,[[["self"],["vector3d"]],["bool"]]],[11,"eq","","",1,[[["self"],["quaternion"]],["bool"]]],[11,"ne","","",1,[[["self"],["quaternion"]],["bool"]]],[11,"eq","","",2,[[["self"],["rotationmatrix"]],["bool"]]],[11,"ne","","",2,[[["self"],["rotationmatrix"]],["bool"]]],[11,"clone","","",0,[[["self"]],["vector3d"]]],[11,"clone","","",1,[[["self"]],["quaternion"]]],[11,"clone","","",2,[[["self"]],["rotationmatrix"]]],[11,"fmt","","Pretty-print a vector.",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Pretty-print a quaternion.",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Pretty-print a rotation matrix.",2,[[["self"],["formatter"]],["result"]]],[11,"add","","Add two vectors.",0,[[["self"],["self"]],["self"]]],[11,"sub","","Subtract a vector from another.",0,[[["self"],["self"]],["self"]]]],"paths":[[3,"Vector3d"],[3,"Quaternion"],[3,"RotationMatrix"],[8,"Rotation"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
